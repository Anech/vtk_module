This software is a VTK data reader for the RealityGrid Steering Library.

Research Computing Services, IT Services, University of Manchester.

----------------------------------------------------------------------

Prerequisites:

RealityGrid Steering Library

CMake (see below) will find the Steering library on your machine if it
has been installed in /usr/local or if you set the environment
variable REG_HOME or REG_STEER_HOME to the path containing the lib and
bin directories of the install or build.

You can also input the path by hand into CMake.

Visualization Toolkit (VTK) 5.2 (or later)

CMake (see below) will find VTK if it is in your PATH or if an
environment variable called VTK_DIR is set to the path containing the
lib and bin directories of VTK.

You can also input the path by hand into CMake.

CMake

The Steering library wrappers are built with an Open Source tool
called CMake available from Kitware, Inc. It is available from here:
http://www.cmake.org/ and is provided in a number of different
flavours including Win32, Mac OS X, IRIX, AIX, Linux and source code.

The Steering Library Wrappers require CMake version 2.6 or later.

----------------------------------------------------------------------

How to build and install:

Please see the instructions that come with the Steering Library for
how to use CMake.

----------------------------------------------------------------------

The Steering Library VTK Module Options.

Some of these options will only be visible in "advanced mode".

REGVTK_INSTALL_TO_REG_DIR - default OFF

If this is set to ON CMake will set CMAKE_INSTALL_PREFIX to match that
which was used to install the Steering Library. This will ensure that
the wrappers are installed to the same locations as the Steering
Library.

REGVTK_WRAP_JAVA   - default OFF
REGVTK_WRAP_PYTHON - default OFF

Set these options to ON to wrap the modules into other languages. Note
that this relies on the version of VTK that you are building against
to have support for these languages built in to it too.

REG_USE_MODULE_Samples - default sockets

Choose the transport over which sample data is moved. Current choices
are sockets, files or proxy - Only available if the Steering Library
has been built as a modular library.

REG_USE_MODULE_Steering - default sockets

Choose the transport which is used to pass steering messages. Current
choices are sockets, wsrf or files - Only available if the Steering
Library has been built as a modular library.

----------------------------------------------------------------------

Running the examples:

The examples have been designed to accept data from mini_app supplied
with the Steering Library.

Assuming the use of direct (sockets-based) data transport, firstly
you'll need to run mini_app and make a note of the port number that it
says that it's outputting data on. Set the environment variables that
will tell the visualization how to find mini_app:

 * REG_CONNECTOR_HOSTNAME
 * REG_CONNECTOR_PORT

Make sure that the VTK and RealityGrid VTK Module libraries are in
your library path.

Cxx

Simply run the mini_viz application from the bin directory of your
build directory:

$ ./bin/mini_viz

Java

Make sure the the VTK and RealityGrid VTK Module jar files are listed
in your CLASSPATH. Compile and run the Java example:

$ cd Examples/Java
$ javac MiniViz.java
$ java MiniViz

Python

Make sure that the VTK and RealityGrid VTK Module packages are listed
in your PYTHONPATH. Run the example.

$ cd Examples/Python
$ python mini_viz.py

----------------------------------------------------------------------

Any comments, enquiries or pleas for explanation should be directed to
the comp-steering mailing list.  Details available from:

http://listserv.manchester.ac.uk/cgi-bin/wa?A0=COMP-STEERING
